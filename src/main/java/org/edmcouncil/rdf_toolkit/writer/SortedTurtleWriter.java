/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Enterprise Data Management Council
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.edmcouncil.rdf_toolkit.writer;

import static org.edmcouncil.rdf_toolkit.comparator.ComparisonUtils.getCollectionMembers;
import static org.edmcouncil.rdf_toolkit.comparator.ComparisonUtils.isCollection;
import static org.edmcouncil.rdf_toolkit.util.Constants.DEFAULT_LANGUAGE;
import static org.edmcouncil.rdf_toolkit.util.Constants.INDENT;
import static org.edmcouncil.rdf_toolkit.util.Constants.LINE_END;

import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.TreeSet;
import org.eclipse.rdf4j.model.BNode;
import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Literal;
import org.eclipse.rdf4j.model.Resource;
import org.eclipse.rdf4j.model.Value;
import org.eclipse.rdf4j.rio.RDFHandlerException;
import org.edmcouncil.rdf_toolkit.model.SortedTurtleObjectList;
import org.edmcouncil.rdf_toolkit.model.SortedTurtlePredicateObjectMap;
import org.edmcouncil.rdf_toolkit.util.Constants;
import org.edmcouncil.rdf_toolkit.util.StringDataTypeOptions;
import org.edmcouncil.rdf_toolkit.util.TextUtils;

/**
 * Equivalent to Sesame's built-in Turtle writer, but the triples are sorted into a consistent order. In order to do the
 * sorting, it must be possible to load all of the RDF statements into memory. NOTE: comments are suppressed, as there
 * isn't a clear way to sort them along with triples.
 */
public class SortedTurtleWriter extends SortedRdfWriter {

  // no need to use namespace prefixes generated by the serializer for Turtle.
  private static final boolean USE_GENERATED_PREFIXES = false;

  // Turtle allows "values" in RDF collections
  private static final Class<Value> COLLECTION_CLASS = Value.class;

  /**
   * RDF Types that are preferred to be used first.
   */
  private final List<IRI> preferredRdfTypes = new ArrayList<>(PREFERRED_RDF_TYPES);

  /**
   * Output stream for this Turtle writer.
   */
  private final IndentingWriter output;

  /**
   * Creates an RDFWriter instance that will write sorted Turtle to the supplied output stream.
   *
   * @param out The OutputStream to write the Turtle to.
   */
  public SortedTurtleWriter(OutputStream out) {
    super(out);
    this.output = new IndentingWriter(new OutputStreamWriter(out));
    this.output.setLineEnd(DEFAULT_LINE_END);
    this.out = this.output;
  }

  /**
   * Creates an RDFWriter instance that will write sorted Turtle to the supplied writer.
   *
   * @param writer The Writer to write the Turtle to.
   */
  public SortedTurtleWriter(Writer writer) {
    super(writer);
    this.output = new IndentingWriter(writer);
    this.output.setLineEnd(DEFAULT_LINE_END);
    this.out = this.output;
  }

  /**
   * Creates an RDFWriter instance that will write sorted Turtle to the supplied output stream.
   *
   * @param out     The OutputStream to write the Turtle to.
   * @param options options for the Turtle writer.
   */
  public SortedTurtleWriter(OutputStream out, Map<String, Object> options) {
    super(out, options);
    this.output = new IndentingWriter(new OutputStreamWriter(out));
    this.out = this.output;
    if (options.containsKey(INDENT)) {
      this.output.setIndentationString((String) options.get(INDENT));
    }
    String lineEnd = options.containsKey(LINE_END) ? options.get(LINE_END).toString() : DEFAULT_LINE_END;
    this.output.setLineEnd(lineEnd);
    // todo set default language
  }

  /**
   * Creates an RDFWriter instance that will write sorted Turtle to the supplied writer.
   *
   * @param writer  The Writer to write the Turtle to.
   * @param options options for the Turtle writer.
   */
  public SortedTurtleWriter(Writer writer, Map<String, Object> options) {
    super(writer, options);
    this.output = new IndentingWriter(writer);
    this.out = this.output;
    if (options.containsKey(INDENT)) {
      this.output.setIndentationString((String) options.get(INDENT));
    }
    String lineEnd = options.containsKey(LINE_END) ? options.get(LINE_END).toString() : DEFAULT_LINE_END;
    this.output.setLineEnd(lineEnd);
    String defaultLanguage = options.containsKey(DEFAULT_LANGUAGE) ? options.get(DEFAULT_LANGUAGE).toString() : null;
    this.output.setDefaultLanguage(defaultLanguage);
  }

  /**
   * Signals the start of the RDF data. This method is called before any data is reported.
   *
   * @throws org.eclipse.rdf4j.rio.RDFHandlerException If the RDF handler has encountered an unrecoverable error.
   */
  @Override
  public void startRDF() throws RDFHandlerException {
    super.startRDF();
    output.setIndentationLevel(0);
  }

  /**
   * Signals the end of the RDF data. This method is called when all data has been reported.
   *
   * @throws org.eclipse.rdf4j.rio.RDFHandlerException If the RDF handler has encountered an unrecoverable error.
   */
  @Override
  public void endRDF() throws RDFHandlerException {
    if (suppressNamedIndividuals) {
      preferredRdfTypes.remove(Constants.owlNamedIndividual);
    }

    try {
      // Sort triples, etc.
      sortedOntologies = unsortedOntologies.toSorted(COLLECTION_CLASS, comparisonContext);
      if (sortedOntologies.size() != unsortedOntologies.size()) {
        System.err.printf("**** ontologies unexpectedly lost or gained during sorting: %d != %d%n",
            sortedOntologies.size(),
            unsortedOntologies.size());
        System.err.flush();
      }

      sortedTripleMap = unsortedTripleMap.toSorted(COLLECTION_CLASS, comparisonContext);
      compareSortedToUnsortedTripleMap(sortedTripleMap, unsortedTripleMap, "Turtle"); // TODO

      sortedBlankNodes = unsortedBlankNodes.toSorted(COLLECTION_CLASS, comparisonContext);
      if (sortedBlankNodes.size() != unsortedBlankNodes.size()) {
        System.err.printf("**** blank nodes unexpectedly lost or gained during sorting: %d != %d%n",
            sortedBlankNodes.size(),
            unsortedBlankNodes.size());
        System.err.flush();
      }

      super.endRDF();
    } catch (Throwable t) {
      throw new RDFHandlerException("unable to generate/write RDF output", t);
    }
  }

  protected void writeHeader(Writer out, SortedTurtleObjectList importList, String[] leadingComments)
      throws Exception {
    // Write TopBraid-specific special comments, if any.
    if ((baseIri != null) || (!importList.isEmpty())) {
      // Write the base IRI, if any.
      if (baseIri != null) {
        output.write("# baseURI: " + baseIri);
        output.writeEOL();
      }
      // Write ontology imports, if any.
      for (Value anImport : importList) {
        output.write("# imports: " + anImport.stringValue());
        output.writeEOL();
      }
      output.writeEOL();
    }

    // Write leading comments, if any.
    if ((leadingComments != null) && (leadingComments.length >= 1)) {
      output.write("####");
      output.writeEOL();
      for (String line : leadingComments) {
        output.write("## " + line);
        output.writeEOL();
      }
      output.write("####");
      output.writeEOL();
      output.writeEOL();
    }

    // Write the base IRI, if any.
    if (baseIri != null) {
      output.write("@base <" + baseIri + "> .");
      output.writeEOL();
    }

    // Write out prefixes and namespaces IRIs.
    if (namespaceTable.size() > 0) {
      Set<String> prefixes = new TreeSet<>(namespaceTable.keySet());
      for (String prefix : prefixes) {
        if (USE_GENERATED_PREFIXES || !generatedNamespaceTable.containsKey(prefix)) {
          output.write("@prefix " + prefix + ": <" + namespaceTable.get(prefix) + "> .");
          output.writeEOL();
        }
      }
      output.writeEOL();
    }
  }

  protected void writeSubjectSeparator(Writer out) {
    // nothing to do here for Turtle
  }

  protected void writeSubjectTriples(Writer out, Resource subject) throws Exception {
    SortedTurtlePredicateObjectMap poMap = sortedTripleMap.get(subject);
    if (poMap == null) {
      poMap = new SortedTurtlePredicateObjectMap();
    }
    if (subject instanceof BNode) {
      if (inlineBlankNodes) {
        if (objectBlankNodes.contains(subject)) {
          out.write("[");
        } else {
          out.write("[]");
        }
      } else {
        out.write("_:" + blankNodeNameMap.get(subject));
      }
    } else {
      writeIri(out, (IRI) subject);
    }
    if (out instanceof IndentingWriter) {
      IndentingWriter intendedOutput = (IndentingWriter) out;
      intendedOutput.writeEOL();
      intendedOutput.increaseIndentation();
    } else {
      out.write("\n");
    }

    // Write predicate/object pairs rendered first.
    for (IRI predicate : firstPredicates) {
      if (poMap.containsKey(predicate)) {
        SortedTurtleObjectList values = poMap.get(predicate);
        if (values != null) { // make a copy so we don't delete anything from the original
          values = (SortedTurtleObjectList) values.clone();
        }
        List<Value> valuesList = new ArrayList<>();
        if (values != null && !values.isEmpty()) {
          if (predicate == Constants.RDF_TYPE) {
            for (IRI preferredType : preferredRdfTypes) {
              if (values.contains(preferredType)) {
                valuesList.add(preferredType);
                values.remove(preferredType);
              }
            }
            if (suppressNamedIndividuals) {
              values.remove(Constants.owlNamedIndividual);
            }
          }
          valuesList.addAll(values);
        }
        if (!valuesList.isEmpty()) {
          writePredicateAndObjectValues(out, predicate, valuesList);
        }
      }
    }

    // Write other predicate/object pairs.
    for (IRI predicate : poMap.sortedKeys()) {
      if (!firstPredicates.contains(predicate)) {
        SortedTurtleObjectList values = poMap.get(predicate);
        writePredicateAndObjectValues(out, predicate, values);
      }
    }

    // Close statement
    boolean unindentBlankNode = inlineBlankNodes &&
        (subject instanceof BNode) &&
        objectBlankNodes.contains(subject);

    if (unindentBlankNode) {
      if (out instanceof IndentingWriter) {
        IndentingWriter intendedOutput = (IndentingWriter) out;
        intendedOutput.writeEOL();
        intendedOutput.decreaseIndentation();
      } else {
        out.write("\n");
      }
      out.write("]");
      if (out instanceof IndentingWriter) {
        IndentingWriter indentedOutput = (IndentingWriter) out;
        indentedOutput.writeEOL();
      } else {
        out.write("\n");
      }
    } else {
      out.write(".");
      if (out instanceof IndentingWriter) {
        IndentingWriter indentedOutput = (IndentingWriter) out;
        indentedOutput.writeEOL();
        indentedOutput.decreaseIndentation();
        indentedOutput.writeEOL(); // blank line
      } else {
        out.write("\n\n");
      }
    }
  }

  protected void writePredicateAndObjectValues(Writer out, IRI predicate, Collection<Value> values) throws Exception {
    writePredicate(out, predicate);
    if (values.size() == 1) {
      out.write(" ");
      writeObject(out, (Value) values.toArray()[0]);
      out.write(" ;");
      if (out instanceof IndentingWriter) {
        IndentingWriter output = (IndentingWriter) out;
        output.writeEOL();
      } else {
        out.write("\n");
      }
    } else if (values.size() > 1) {
      if (out instanceof IndentingWriter) {
        IndentingWriter output = (IndentingWriter) out;
        output.writeEOL();
        output.increaseIndentation();
      } else {
        out.write("\n");
      }
      int numValues = values.size();
      int valueIndex = 0;
      for (Value value : values) {
        valueIndex += 1;
        writeObject(out, value);
        if (valueIndex < numValues) {
          out.write(" ,");
        }
        if (out instanceof IndentingWriter) {
          IndentingWriter output = (IndentingWriter) out;
          output.writeEOL();
        } else {
          out.write("\n");
        }
      }
      out.write(";");
      if (out instanceof IndentingWriter) {
        IndentingWriter output = (IndentingWriter) out;
        output.writeEOL();
        output.decreaseIndentation();
      } else {
        out.write("\n");
      }
    }
  }

  protected void writePredicate(Writer out, IRI predicate) throws Exception {
    out.write(
        convertVerbIriToString(
            predicate,
            USE_GENERATED_PREFIXES,
            true,
            false));
  }

  protected void writeIri(Writer out, IRI iri) throws Exception {
    out.write(
        convertIriToString(
            iri,
            USE_GENERATED_PREFIXES,
            true,
            false));
  }

  protected void writeObject(Writer out, Value value) throws Exception {
    if (value instanceof BNode) {
      writeObject(out, (BNode) value);
    } else if (value instanceof IRI) {
      writeObject(out, (IRI) value);
    } else if (value instanceof Literal) {
      writeObject(out, (Literal) value);
    } else {
      out.write("\"" + value.stringValue() + "\"");
      out.write(" ");
    }
  }

  protected void writeObject(Writer out, BNode bnode) throws Exception {
    if (inlineBlankNodes) {
      if (isCollection(comparisonContext, bnode, COLLECTION_CLASS)) {
        // Open parentheses
        out.write("(");
        if (out instanceof IndentingWriter) {
          IndentingWriter output = (IndentingWriter) out;
          output.writeEOL();
          output.increaseIndentation();
        } else {
          out.write("\n");
        }

        // Write collection members
        for (Value member : getCollectionMembers(unsortedTripleMap, bnode, COLLECTION_CLASS, comparisonContext)) {
          writeObject(out, member);
          if (out instanceof IndentingWriter) {
            IndentingWriter output = (IndentingWriter) out;
            output.writeEOL();
          } else {
            out.write("\n");
          }
        }

        // Close parentheses
        if (out instanceof IndentingWriter) {
          IndentingWriter output = (IndentingWriter) out;
          output.decreaseIndentation();
          out.write(")");
        } else {
          out.write(")");
        }
      } else { // not a collection
        SortedTurtlePredicateObjectMap poMap = sortedTripleMap.get(bnode);
        if (poMap == null) {
          poMap = new SortedTurtlePredicateObjectMap();
        }

        // Open brackets
        out.write("[");
        if (out instanceof IndentingWriter) {
          IndentingWriter output = (IndentingWriter) out;
          output.writeEOL();
          output.increaseIndentation();
        } else {
          out.write("\n");
        }

        // Write predicate/object pairs rendered first.
        for (IRI predicate : firstPredicates) {
          if (poMap.containsKey(predicate)) {
            SortedTurtleObjectList values = poMap.get(predicate);
            writePredicateAndObjectValues(out, predicate, values);
          }
        }

        // Write other predicate/object pairs.
        for (IRI predicate : poMap.sortedKeys()) {
          if (!firstPredicates.contains(predicate)) {
            SortedTurtleObjectList values = poMap.get(predicate);
            writePredicateAndObjectValues(out, predicate, values);
          }
        }

        // Close brackets
        if (out instanceof IndentingWriter) {
          IndentingWriter output = (IndentingWriter) out;
          output.decreaseIndentation();
          out.write("]");
        } else {
          out.write("]");
        }
      }
    } else { // no inlining of blank nodes
      if (unsortedTripleMap.containsKey(bnode)) {
        out.write("_:" + blankNodeNameMap.get(bnode));
      } else {
        System.out.println("**** blank node not a subject: " + bnode.stringValue());
        System.out.flush();
        out.write("[]"); // last resort - this should never happen
      }
    }
  }

  protected void writeObject(Writer out, IRI iri) throws Exception {
    writeIri(out, iri);
  }

  protected void writeObject(Writer out, Literal literal) throws Exception {
    if (literal == null) {
      out.write("null<Literal>");
      return;
    }

    IRI literalDatatype = literal.getDatatype();
    Optional<String> languageOptional = literal.getLanguage();

    if (overrideStringLanguage != null && literalDatatype.equals(Constants.xsString)) {
      writeString(out, literal.stringValue());
      out.write("@" + overrideStringLanguage);
    } else if (languageOptional.isPresent()) {
      writeString(out, literal.stringValue());
      out.write("@" + languageOptional.get());
    } else if (literalDatatype != null) {
      boolean useExplicit =
          stringDataTypeOption == StringDataTypeOptions.EXPLICIT ||
              !(Constants.xsString.equals(literalDatatype) || Constants.rdfLangString.equals(literalDatatype));
      writeString(out, literal.stringValue());
      if (useExplicit) {
        out.write("^^");
        writeIri(out, literalDatatype);
      }
    } else {
      writeString(out, literal.stringValue());
    }
  }

  protected void writeString(Writer out, String str) throws Exception {
    if (str == null) {
      return;
    }
    if (TextUtils.isMultilineString(str)) { // multi-line string
      if (str.contains("\"")) { // string contains double quote chars
        if (str.contains("'")) { // string contains both single and double quote chars
          out.write("\"\"\"");
          out.write(escapeString(str).replaceAll("\"", "\\\\\""));
          out.write("\"\"\"");
        } else { // string contains double quote chars but no single quote chars
          out.write("'''");
          out.write(escapeString(str));
          out.write("'''");
        }
      } else { // string has no double quote chars
        out.write("\"\"\"");
        out.write(escapeString(str));
        out.write("\"\"\"");
      }
    } else { // single-line string
      if (str.contains("\"")) { // string contains double quote chars
        if (str.contains("'")) { // string contains both single and double quote chars
          out.write("\"");
          out.write(escapeString(str).replaceAll("\"", "\\\\\""));
          out.write("\"");
        } else { // string contains double quote chars but no single quote chars
          out.write("'");
          out.write(escapeString(str));
          out.write("'");
        }
      } else { // string has no double quote chars
        out.write("\"");
        out.write(escapeString(str));
        out.write("\"");
      }
    }
  }

  protected void writeFooter(Writer out, String[] trailingComments) throws Exception {
    // Write traiing comments, if any.
    if ((trailingComments != null) && (trailingComments.length >= 1)) {
      output.write("####");
      output.writeEOL();
      for (String line : trailingComments) {
        output.write("## " + line);
        output.writeEOL();
      }
      output.write("####");
      output.writeEOL();
    }
  }

  private String escapeString(String str) {
    if (str == null) {
      return null;
    }
    return str.replaceAll("\\\\", "\\\\\\\\");
  }

}
